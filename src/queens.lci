
# queens.lci
#
# Implementation of n-queens problem.
# Experimental use of ~ operator (and let x ~= M in ...) to use call-by-value.
#
# Usage: queens <no>
# Gives all solutions (in reasonable time) for up to 5 queens.


Queens = \qno.
	let qlist ~= 1..qno in
	Qu qno qlist;


# Qu is the main function
# m is the number of queens and qlist a list of values
# Qu calls Qu m-1 and combines the result with the values
# for the m queen. Then it filters the result to keep only
# those combinations that are safe.

Qu = \m.\qlist.
	If (IsZero m)
		[[]]
		let n ~= m - 1 in
		let sub_sol ~= Qu n qlist in
		let comb ~= Combine sub_sol qlist in		# create (sol, value) combinations
		let filtered ~= Filter (\p.Safe ~ (Fst p) ~ (Snd p) m) comb in
		Map (\p.Append ~ (Fst p) ~ [Snd p]) filtered;


# Safe: checks if value n of queen m is compatible with
# the values of other queens stored in list p

Safe = \p.\n.\m.
	All Not
		(Map
		 	(\p.Check ~ (Fst p) ~ (Snd p) m n)
			~ (Zip (Nats 1) p)
		);


# Check: returns true if queen i (value j) threatens queen m (value n)

Check = \i.\j.\m.\n.
	j   == n		||
	i+j == m+n	||
	i+n == m+j;



# --- redefine basic funtions using ~ operator

Map = \f.\l.
	If (IsNil l)
		Nil
		(Cons (f ~ (Head l)) (Map f ~ (Tail l)));

Filter = \f.\l.
	If (IsNil l)
		Nil
		(If ~ (f ~ (Head l))
			(Cons ~ (Head l) ~ (Filter f (Tail l)))
			(Filter f (Tail l)));

Combine = \l1.\l2.
	If (IsNil l1)
		Nil
		(Append ~ (Map (Pair (Head l1)) l2) ~ (Combine (Tail l1) l2));

All = \f.\l.
	If (IsNil l)
		True
		(And (f ~ (Head l)) (All f ~ (Tail l)));

